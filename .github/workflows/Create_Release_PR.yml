name: Create Release Branch and PR

on:
  schedule:
    # 06:30 UTC = 12:00 IST on Saturdays
    - cron: "30 6 * * 6"
  workflow_dispatch:
    inputs:
      bump:
        description: "Semver bump: patch | minor | major (ignored if version is provided)"
        required: false
        default: "patch"
      version:
        description: "Optional explicit version (must be > max(master, develop))"
        required: false

env:
  BASE_BRANCH: develop
  TARGET_BRANCH: master

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.BASE_BRANCH }}
          fetch-depth: 0
      - name: Print Node & npm
        run: |
          node -v
          npm -v
      - name: Lint
        run: |
          if [ -f package.json ]; then
            if jq -e '.scripts.lint' package.json >/dev/null 2>&1; then
              npm ci
              npm run lint
            else
              echo "No lint script; skipping."
            fi
          else
            echo "No package.json found; skipping lint."
          fi

  create_release_pr:
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout full repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure both branches exist locally
        run: |
          git fetch origin ${{ env.BASE_BRANCH }}:${{ env.BASE_BRANCH }} --update-head-ok || true
          git fetch origin ${{ env.TARGET_BRANCH }}:${{ env.TARGET_BRANCH }} --update-head-ok || true
          git checkout ${{ env.BASE_BRANCH }}
          git pull --ff-only origin ${{ env.BASE_BRANCH }}
          git checkout ${{ env.TARGET_BRANCH }}
          git pull --ff-only origin ${{ env.TARGET_BRANCH }}
          git checkout ${{ env.BASE_BRANCH }}

      - name: Compute next version (max(master, develop) -> bump)
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          PKG_FILE="package.json"
          get_ver () { branch="$1"; git show "$branch:$PKG_FILE" | jq -r '.version'; }

          DEV_VER=$(get_ver "${{ env.BASE_BRANCH }}")
          MAS_VER=$(get_ver "${{ env.TARGET_BRANCH }}")

          echo "develop version: $DEV_VER"
          echo "master  version: $MAS_VER"

          # Pick max version
          cmp() { npx semver -r ">$2" "$1" >/dev/null 2>&1; }
          if cmp "$DEV_VER" "$MAS_VER"; then BASE="$DEV_VER"; else BASE="$MAS_VER"; fi

          BUMP_KIND="${{ inputs.bump || 'patch' }}"
          NEXT=$(npx semver "$BASE" -i "$BUMP_KIND")

          echo "base_version=$BASE"       >> "$GITHUB_OUTPUT"
          echo "new_version=$NEXT"        >> "$GITHUB_OUTPUT"
          echo "develop_version=$DEV_VER" >> "$GITHUB_OUTPUT"
          echo "master_version=$MAS_VER"  >> "$GITHUB_OUTPUT"
          echo "New version: $NEXT"

      - name: Check if there are diffs from develop -> master
        id: diff
        run: |
          set -euo pipefail
          # If there are no differences, we skip creating a PR to avoid empty releases.
          if git rev-list --no-merges --left-only --count ${{ env.TARGET_BRANCH }}...${{ env.BASE_BRANCH }} | grep -q '^0$'; then
            echo "has_diff=false" >> "$GITHUB_OUTPUT"
            echo "No new commits in develop compared to master."
          else
            echo "has_diff=true" >> "$GITHUB_OUTPUT"
            echo "There are new commits to release."
          fi

      - name: Create release branch from develop
        if: steps.diff.outputs.has_diff == 'true'
        id: br
        run: |
          set -euo pipefail
          REL="release/v${{ steps.ver.outputs.new_version }}"
          # If branch already exists, suffix with -rN
          NAME="$REL"
          n=1
          while git ls-remote --heads origin "$NAME" >/dev/null 2>&1 && git ls-remote --heads origin "$NAME" | grep -q "$NAME"; do
            NAME="${REL}-r$n"
            n=$((n+1))
          done
          git checkout -B "$NAME" ${{ env.BASE_BRANCH }}
          echo "branch=$NAME" >> "$GITHUB_OUTPUT"
          echo "Created branch: $NAME"

      - name: Bump version in package.json (no git tag)
        if: steps.diff.outputs.has_diff == 'true'
        run: |
          npm pkg set version=${{ steps.ver.outputs.new_version }}
          cat package.json | jq -r '.version'
          echo "version_bumped=${{ steps.ver.outputs.new_version }}" >> "$GITHUB_OUTPUT"

      - name: Commit version bump
        if: steps.diff.outputs.has_diff == 'true'
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json 2>/dev/null || true
          if git diff --cached --quiet; then
            echo "No changes after bump (unexpected)."
          else
            git commit -m "chore(release): v${{ steps.ver.outputs.new_version }}"
          fi

      - name: Push branch
        if: steps.diff.outputs.has_diff == 'true'
        run: git push --set-upstream origin "${{ steps.br.outputs.branch }}"

      - name: Create PR to master
        if: steps.diff.outputs.has_diff == 'true'
        id: pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Release v${{ steps.ver.outputs.new_version }}"
          body: |
            This PR prepares release **v${{ steps.ver.outputs.new_version }}**.

            - Base branch: `${{ env.BASE_BRANCH }}`
            - Target branch: `${{ env.TARGET_BRANCH }}`
            - develop version: `${{ steps.ver.outputs.develop_version }}`
            - master version: `${{ steps.ver.outputs.master_version }}`
            - new version: `${{ steps.ver.outputs.new_version }}`
          labels: release
          base: ${{ env.TARGET_BRANCH }}
          branch: ${{ steps.br.outputs.branch }}
          draft: false
          signoff: false

      - name: Echo outputs
        if: steps.diff.outputs.has_diff == 'true'
        run: |
          echo "PR_NUMBER=${{ steps.pr.outputs.pull-request-number }}"
          echo "PR_URL=${{ steps.pr.outputs.pull-request-url }}"
          echo "RELEASE_BRANCH=${{ steps.br.outputs.branch }}"
          echo "NEW_VERSION=${{ steps.ver.outputs.new_version }}"
          echo "MASTER_VERSION=${{ steps.ver.outputs.master_version }}"
          echo "DEVELOP_VERSION=${{ steps.ver.outputs.develop_version }}"
