name: Create Release Branch and PR

# This workflow runs automatically every Saturday at 12:00 PM IST (06:30 UTC)
# and can also be run manually with an optional version input.
on:
  schedule:
    - cron: "30 6 * * 6" # 06:30 UTC on Saturday (12:00 PM IST)
  workflow_dispatch:
    inputs:
      version:
        description: "The semantic version to use (e.g., 1.2.3)"
        required: false

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

  create-pr:
    needs: lint # Run only if 'lint' succeeds
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout develop branch (full history for tags)
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0 # crucial to fetch all history and tags

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Compute version
        id: versioning
        shell: bash
        run: |
          set -euo pipefail

          # Use INPUT for convenience (empty when scheduled)
          INPUT="${{ github.event.inputs.version || 'patch' }}"

          if [ "${{ github.event_name }}" = "schedule" ]; then
          # Scheduled run => bump patch
          npm version patch --no-git-tag-version
          elif [ -n "$INPUT" ]; then
          # Manual run: accept major|minor|patch OR explicit SemVer
          if [[ "$INPUT" =~ ^(major|minor|patch)$ ]]; then
              npm version "$INPUT" --no-git-tag-version
          elif [[ "$INPUT" =~ ^[0-9]+(\.[0-9]+){2}(-[0-9A-Za-z.-]+)?$ ]]; then
              npm version "$INPUT" --no-git-tag-version
          else
              echo "Invalid version input: '$INPUT'. Use major|minor|patch or SemVer x.y.z[-prerelease]." >&2
              exit 1
          fi
          else
          echo "No version specified for manual trigger." >&2
          exit 1
          fi

          # âœ… Always read the actual new version from package.json
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

          echo "Resolved new version: $NEW_VERSION"

      - name: Check diff against master
        id: check_diff
        run: |
          set -euo pipefail
          git fetch origin master
          if git diff --quiet origin/master...HEAD -- package.json; then
            echo "No changes in package.json compared to master. Exiting."
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected in package.json compared to master."
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate release notes
        id: release_notes
        shell: bash
        run: |
          # Find the last tag on the master branch
          LAST_TAG=$(git describe --tags --abbrev=0 master 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "No previous tag found. Generating release notes from all commits on develop."
            LOG_RANGE="HEAD"
          else
            echo "Found last tag: $LAST_TAG. Generating notes from new commits."
            LOG_RANGE="$LAST_TAG..HEAD"
          fi

          # Bulleted list of commit messages (oldest first)
          RELEASE_NOTES=$(git log --pretty=format:'- %s' --reverse $LOG_RANGE)

          # Escape for GitHub Actions output
          RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"

          echo "release_notes=$RELEASE_NOTES" >> "$GITHUB_OUTPUT"

      - name: Create Release Branch and Pull Request
        id: release_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(release): Prepare release v${{ steps.versioning.outputs.new_version }}"
          title: "Release ${{ steps.versioning.outputs.new_version }}"
          body: |
            ## Release Notes
            This PR prepares the release for version `${{ steps.versioning.outputs.new_version }}`.

            ### Changes since last release:
            ${{ steps.release_notes.outputs.release_notes }}

            ---
            _**NOTE:** If this PR has conflicts, the `auto-merge-and-tag` workflow will fail. Please resolve conflicts manually._
          branch: "release/v${{ steps.versioning.outputs.new_version }}"
          base: master
          labels: "release, automated"

      - name: Check if PR was created
        if: ${{ steps.release_pr.outputs.pull-request-number != '' }}
        run: |
          echo "Pull Request created successfully!"
          echo "PR URL: ${{ steps.release_pr.outputs.pull-request-url }}"
